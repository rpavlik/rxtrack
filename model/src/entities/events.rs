// Copyright 2022-2023, Ryan Pavlik <ryan@ryanpavlik.com>
// SPDX-License-Identifier: GPL3+

//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.6

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub rx_id: i32,
    pub event: String,
    pub date: TimeDate,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::rx_info::Entity",
        from = "Column::RxId",
        to = "super::rx_info::Column::RxId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RxInfo,
}

impl Related<super::rx_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RxInfo.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
